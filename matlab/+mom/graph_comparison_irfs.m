function graph_comparison_irfs(matched_irfs,irf_model_varobs,varobs_id,irfHorizon,relative_irf,endo_names,exo_names,exo_names_tex,dname,fname,graph_format,TeX,nodisplay,figures_textwidth)
% graph_comparison_irfs(matched_irfs,irf_model_varobs,varobs_id,irfHorizon,relative_irf,endo_names,exo_names,exo_names_tex,dname,fname,graph_format,TeX,nodisplay,figures_textwidth)
% -------------------------------------------------------------------------
% Plots and saves to disk the comparison of the selected data irfs and corresponding model irfs
% -------------------------------------------------------------------------
% INPUTS
% matched_irfs:      [matrix]   information on matched data irfs
% irf_model_varobs:  [matrix]   model irfs for observable variables
% varobs_id:         [vector]   index for observable variables in endo_names
% irfHorizon:        [scalar]   maximum horizon of irfs
% relative_irf:      [boolean]  if true, plots normalized irfs
% endo_names:        [cell]     names of endogenous variables
% exo_names:         [cell]     names of exogenous variables
% exo_names_tex:     [cell]     names of exogenous variables in latex
% dname:             [string]   name of the directory where to save the graphs
% fname:             [string]   name of the mod file
% graph_format:      [cell]     format of the graphs
% TeX:               [boolean]  if true, uses latex for plots
% nodisplay:         [boolean]  if true, does not display the graphs
% figures_textwidth: [scalar]   textwidth used in plots
% -------------------------------------------------------------------------
% OUTPUT
% No output, just displays and saves to disk the graphs
% -------------------------------------------------------------------------
% This function is called by
%  o mom.run
% -------------------------------------------------------------------------
% This function calls
%  o dyn_figure
%  o dyn_saveas
%  o remove_fractional_xticks
%  o CheckPath
%  o pltorg
% -------------------------------------------------------------------------

% Copyright Â© 2023 Dynare Team
%
% This file is part of Dynare.
%
% Dynare is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% Dynare is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with Dynare.  If not, see <https://www.gnu.org/licenses/>.


graphDirectoryName = CheckPath('graphs',dname);
latexDirectoryName = CheckPath('latex',dname);
if TeX && any(strcmp('eps',cellstr(graph_format)))
    fidTeX = fopen([latexDirectoryName filesep fname '_irf_matching_plot.tex'],'w');
    fprintf(fidTeX,'%% TeX eps-loader file generated by mom.run.m (Dynare).\n');
    fprintf(fidTeX,['%% ' datestr(now,0) '\n']);
    fprintf(fidTeX,' \n');
end
shockEntries = cellfun(@(x) x(2), matched_irfs(:, 1));
uniqueShockEntries = unique(shockEntries);
for jexo = uniqueShockEntries'
    entriesDataIrfs = find(cellfun(@(x) x(2) == jexo, matched_irfs(:, 1)));
    uniqueVariables = unique(cellfun(@(x) x(1), matched_irfs(entriesDataIrfs,1)));
    [nbplt,nr,nc,lr,lc,nstar] = pltorg(length(uniqueVariables));
    fig = 0;
    for jvar = 1:length(uniqueVariables)
        if jvar==1 || ~( (fig-1)*nstar<jvar && jvar<=fig*nstar )
            fig = fig+1;
            fig_irf = dyn_figure(nodisplay,'Name',['Irf matching shock to ' exo_names{jexo} ' figure ' int2str(fig)]);
        end
        plt = jvar-(fig-1)*nstar;
        dataIrfRows = find(cellfun(@(x) x(1) == uniqueVariables(jvar) && x(2) == jexo, matched_irfs(:, 1)));
        dataIrfPeriods = cellfun(@(x) x(3), matched_irfs(dataIrfRows,1));
        dataIrfValues = cell2mat(matched_irfs(dataIrfRows,2));
        if nbplt>1 && fig==nbplt
            subplot(lr,lc,plt);
        else
            subplot(nr,nc,plt);
        end
        plt_data = plot(dataIrfPeriods,dataIrfValues,'x','linewidth',2);
        hold on
        plt_model = plot(1:irfHorizon, irf_model_varobs(:,varobs_id==uniqueVariables(jvar),jexo),'-k','linewidth',1);
        hold on
        plot([1 irfHorizon],[0 0],'-r','linewidth',0.5);
        hold off
        xlim([1 irfHorizon]);
        remove_fractional_xticks
        if TeX
            title(['$' endo_names{uniqueVariables(jvar)} '$'],'Interpreter','latex');
        else
            title(endo_names{uniqueVariables(jvar)},'Interpreter','none');
        end
        if (plt==nstar) || jvar==length(uniqueVariables)
            % Adding a legend at the bottom
            axes('Position',[0, 0, 1, 1],'Visible','off');
            lgd = legend([plt_data,plt_model],{'Data', 'Model'}, 'Location', 'southeast','NumColumns',2);
            lgd.Position = [0.405 0.025 lgd.Position(3) lgd.Position(4)];

            dyn_saveas(fig_irf,[graphDirectoryName filesep fname '_matched_irf_' exo_names{jexo} int2str(fig)],nodisplay,graph_format);
            if TeX && any(strcmp('eps',cellstr(graph_format)))
                fprintf(fidTeX,'\\begin{figure}[H]\n');
                fprintf(fidTeX,'\\centering \n');
                fprintf(fidTeX,'\\includegraphics[width=%2.2f\\textwidth]{%s_matched_irf_%s%s}\n',figures_textwidth*min(plt/nc,1),[graphDirectoryName filesep fname],exo_names{jexo},int2str(fig));
                if relative_irf
                    fprintf(fidTeX,'\\caption{Relative impulse response functions (orthogonalized shock to $%s$).}', exo_names_tex{jexo});
                else
                    fprintf(fidTeX,'\\caption{Impulse response functions (orthogonalized shock to $%s$).}', exo_names_tex{jexo});
                end
                fprintf(fidTeX,'\\label{Fig:IRF:%s:%s}\n', exo_names{jexo},int2str(fig));
                fprintf(fidTeX,'\\end{figure}\n');
                fprintf(fidTeX,' \n');
            end
        end
    end
end